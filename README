
This should be quite interesting. The goal here is to ensure
that keys are automatically removed when the object is destroyed.
we accomplish this by doing the following lookups

 this maps values to the key objects they rely on. The object
 reference itself is weak, and the key references are strong.
 the key object's DESTROY method will delete the key of the object itself
 within this mapping - the object stores the actual key internally.
 $value => { $key1 => 1, $key_2 => 1}

 This lookup maps a string key (together with is type) to an object.
 the mapping value itself is a weak reference, and the strong
 reference is actually a value of the object mapping
 $string_key => $key_object.


 this maps a key object to the value object. This is our forward lookup
 $key_object => $value_object.


PERFORMANCE

All insertion operations consist of attaching a perl magic structure
to the underlying SV object. This magic structure is used for chained
garbage collection. The magic structure contains one more of an 
HR_Action structure which contains specifiers and hints about which
type of action 

Value objects have only a single chained

I'm not sure about the performance, but a lookup operation consists
of the following steps:
 (1) Possibly convert the key into something unique,
 (2) Map the key to a key object,
 (3) Find the value by the key object.

A store operation consists of the following steps:
 (1) Possibly convert the key,
 (2) Create a new object for the key,
 (3) Store the key as a value for the scalar lookup
 (4) Store the value under the key object in the forward table
 (5) Store the key under the value in the reverse table

A deletion by value operation consists of the following steps
 (1) Lookup the value's associated keys in the reverse table
 (2) For each of the values, delete their key entry in the forward table
 (3) Delete the entire reverse hash - which contains strong references to the key
		objects
 (4) The key object's DESTROY method will delete itself from the scalar lookup

A deletion by key consists of the following steps
 (1) Fetch the value using forward lookup,
 (2) Delete key's reverse lookup entry


LICENSE AND COPYRIGHT

Copyright (C) 2011 M. Nunberg,

This program is free software; you can redistribute it and/or modify it
under the terms of either: the GNU General Public License as published
by the Free Software Foundation; or the Artistic License.

See http://dev.perl.org/licenses/ for more information.

